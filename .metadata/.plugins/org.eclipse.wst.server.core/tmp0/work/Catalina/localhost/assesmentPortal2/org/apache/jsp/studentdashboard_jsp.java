/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.25
 * Generated at: 2024-07-12 15:33:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.assesmentPortal2.TestInfo;
import com.assesmentPortal2.GetTestData;
import java.util.*;
import java.net.URLEncoder;

public final class studentdashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("com.assesmentPortal2.GetTestData");
    _jspx_imports_classes.add("com.assesmentPortal2.TestInfo");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
	response.setHeader("Pragma", "no-cache");
	response.setDateHeader("Expires", 0);
	
	if (session.getAttribute("user") == null) {
	    response.sendRedirect("index.jsp");
	    return;
	}



      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/studentdashboard.css\">\r\n");
      out.write("<title>Student Dashboard</title>\r\n");
      out.write("</head>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    function redirectToPage() {\r\n");
      out.write("        window.location.href = 'Logout'; // Replace 'targetPage.jsp' with the desired URL\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("	<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"header\">\r\n");
      out.write("            <h1>Welcome to the Test Assessment Dashboard</h1>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"cards\">\r\n");
      out.write("        ");

	        List<TestInfo> tests = GetTestData.getAllTest();
	        int i = 1;
	        for (TestInfo test : tests) {
        
      out.write("\r\n");
      out.write("            <div class=\"card\">\r\n");
      out.write("                <h2>");
      out.print( test.getTestName() );
      out.write("</h2>\r\n");
      out.write("                <a href=\"Pariksha?id=");
      out.print( test.getId());
      out.write("&testName=");
      out.print( URLEncoder.encode(test.getTestName(), "UTF-8"));
      out.write(" \">Start Test</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        ");

	        }
        
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h1>Instructions for the MCQ Exam</h1>\r\n");
      out.write("        <ul>\r\n");
      out.write("            <li><strong>Question Format:</strong> The exam consists of all multiple-choice questions.</li>\r\n");
      out.write("            <li><strong>Answering Format:</strong> Each question has four options (A, B, C, D). Only one option is correct.</li>\r\n");
      out.write("            <li><strong>Marking Scheme:</strong>\r\n");
      out.write("                <ul>\r\n");
      out.write("                    <li><strong>Correct Answer:</strong> 10 marks will be awarded for each correct answer.</li>\r\n");
      out.write("                    <li><strong>Incorrect Answer:</strong> 0 marks will be deducted for each incorrect answer.</li>\r\n");
      out.write("                    <li><strong>Unanswered Questions:</strong> No marks will be awarded or deducted for unanswered questions.</li>\r\n");
      out.write("                </ul>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li><strong>How to Answer:</strong>\r\n");
      out.write("                <ul>\r\n");
      out.write("                    <li>Select the option you believe is correct.</li>\r\n");
      out.write("                    <li>Ensure you select only one option for each question.</li>\r\n");
      out.write("                </ul>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li><strong>Submission:</strong>\r\n");
      out.write("                <ul>\r\n");
      out.write("                    <li>Ensure all answers are marked clearly before submitting your exam.</li>\r\n");
      out.write("                    <li>Once submitted, you will not be able to make any changes.</li>\r\n");
      out.write("                </ul>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li><strong>Exam Conduct:</strong>\r\n");
      out.write("                <ul>\r\n");
      out.write("                    <li>No communication with other candidates is allowed during the exam.</li>\r\n");
      out.write("                    <li>Use of electronic devices, books, or notes is strictly prohibited.</li>\r\n");
      out.write("                    <li>Any form of cheating will result in immediate disqualification.</li>\r\n");
      out.write("                </ul>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li><strong>Clarifications:</strong>\r\n");
      out.write("                <ul>\r\n");
      out.write("                    <li>If you have any doubts or need clarification during the exam, raise your hand, and an invigilator will assist you.</li>\r\n");
      out.write("                    <li>Do not discuss the questions with other candidates.</li>\r\n");
      out.write("                </ul>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li><strong>Post-Exam:</strong>\r\n");
      out.write("                <ul>\r\n");
      out.write("                    <li>Remain seated until all exams are collected and you are instructed to leave.</li>\r\n");
      out.write("                    <li>Do not discuss the questions or answers with other candidates after the exam.</li>\r\n");
      out.write("                </ul>\r\n");
      out.write("            </li>\r\n");
      out.write("        </ul>\r\n");
      out.write("        <p>Please read and understand these instructions carefully. Good luck with your exam!</p>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"button-container\">\r\n");
      out.write("		<button onclick=\"redirectToPage()\">Logout</button>\r\n");
      out.write("	</div>\r\n");
      out.write("    <footer>\r\n");
      out.write("    	<p>&copy; 2023 Our Company</p>\r\n");
      out.write("	</footer>\r\n");
      out.write("</body>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
