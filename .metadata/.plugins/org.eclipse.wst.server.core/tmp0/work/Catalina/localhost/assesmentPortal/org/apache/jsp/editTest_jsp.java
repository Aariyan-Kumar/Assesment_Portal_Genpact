/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.25
 * Generated at: 2024-07-02 03:02:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import com.assesmentPortal.DatabaseConnection;

public final class editTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.assesmentPortal.DatabaseConnection");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


	
	response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
	response.setHeader("Pragma", "no-cache");
	response.setDateHeader("Expires", 0);
	
	if (session.getAttribute("user") == null) {
	    response.sendRedirect("index.jsp");
	    return;
	}
	
    String id = request.getParameter("id");
    String tag = "";
    int numOfQuestions = 0;
    int numOfPeople = 0;

    if (id != null) {
        try {
            Connection connection = DatabaseConnection.getConnection();
            String selectQuery = "SELECT subjectName, noOfQuestion FROM testsubjects WHERE id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
            preparedStatement.setInt(1, Integer.parseInt(id));
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                tag = resultSet.getString("subjectName");
                numOfQuestions = resultSet.getInt("noOfQuestion");
            }
            connection.close();
            System.out.println("Database Connection Closed");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    if ("POST".equalsIgnoreCase(request.getMethod())) {
        tag = request.getParameter("tag");
        numOfQuestions = Integer.parseInt(request.getParameter("numOfQuestions"));

        try {
            Connection connection = DatabaseConnection.getConnection();
            String updateQuery = "UPDATE testsubjects SET subjectName = ?, noOfQuestion = ? WHERE id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
            preparedStatement.setString(1, tag);
            preparedStatement.setInt(2, numOfQuestions);
            preparedStatement.setInt(3, Integer.parseInt(id));
            preparedStatement.executeUpdate();
            response.sendRedirect("admindashboard.jsp");
            connection.close();
            System.out.println("Database Connection Closed");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<style>\r\n");
      out.write("	form {\r\n");
      out.write("	    max-width: 400px;\r\n");
      out.write("	    margin: auto;\r\n");
      out.write("	    padding: 1em;\r\n");
      out.write("	    background: #f9f9f9;\r\n");
      out.write("	    border-radius: 5px;\r\n");
      out.write("	}\r\n");
      out.write("	div {\r\n");
      out.write("	    margin-bottom: 1em;\r\n");
      out.write("	}\r\n");
      out.write("	label {\r\n");
      out.write("	    margin-bottom: .5em;\r\n");
      out.write("	    color: #333333;\r\n");
      out.write("	    display: block;\r\n");
      out.write("	}\r\n");
      out.write("	input {\r\n");
      out.write("	    border: 1px solid #CCCCCC;\r\n");
      out.write("	    padding: .5em;\r\n");
      out.write("	    width: calc(100% - 1em);\r\n");
      out.write("	    box-sizing: border-box;\r\n");
      out.write("	}\r\n");
      out.write("	button {\r\n");
      out.write("	    padding: 10px 20px;\r\n");
      out.write("	    background-color: #4CAF50;\r\n");
      out.write("	    color: white;\r\n");
      out.write("	    border: none;\r\n");
      out.write("	    cursor: pointer;\r\n");
      out.write("	    border-radius: 5px;\r\n");
      out.write("	    font-size: 16px;\r\n");
      out.write("	}\r\n");
      out.write("	button:hover {\r\n");
      out.write("	    background-color: #45a049;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h2>Edit Test</h2>\r\n");
      out.write("\r\n");
      out.write("<form method=\"post\">\r\n");
      out.write("    <div>\r\n");
      out.write("        <label for=\"tag\">Test Name</label>\r\n");
      out.write("        <input type=\"text\" id=\"tag\" name=\"tag\" value=\"");
      out.print( tag );
      out.write("\" required>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div>\r\n");
      out.write("        <label for=\"numOfQuestions\">Number of Questions</label>\r\n");
      out.write("        <input type=\"number\" id=\"numOfQuestions\" name=\"numOfQuestions\" value=\"");
      out.print( numOfQuestions );
      out.write("\" required>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div>\r\n");
      out.write("        <button type=\"submit\">Update Test</button>\r\n");
      out.write("    </div>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
